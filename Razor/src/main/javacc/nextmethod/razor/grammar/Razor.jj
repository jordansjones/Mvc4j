options {
	LOOKAHEAD = 2;
	FORCE_LA_CHECK = true;

	IGNORE_CASE = true;
	STATIC = false;
	UNICODE_INPUT = false;
	CACHE_TOKENS = true;
	TOKEN_MANAGER_USES_PARSER = true;
}

PARSER_BEGIN(RazorParser)

package nextmethod.razor.parser;

public class RazorParser {}

PARSER_END(RazorParser)


<*> SKIP :
{
//	" "
	 "\t"
	| "\n"
	| "\r"
//	| "\f"
}

<*> TOKEN :
{
	<#ALPHA_CHAR: ["a"-"z", "A"-"Z"]>
	| <#NUM_CHAR: ["0"-"9"]>
	| <#ALPHANUM_CHAR: ["a"-"z", "A"-"Z", "0"-"9"]>
	| <#IDENTIFIER_CHAR: ["a"-"z", "A"-"Z", "0"-"9", "_", "-", ".", ":"]>
	| <#AT: "@">
	| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)*>
	| <#QUOTED_STRING_NB: ("'" (~["'", "\r", "\n"])* "'")
						| ("\"" ( ~["\"", "\r", "\n"])* "\"")>
	| <#QUOTED_STRING: ("'" (~["'"])* "'") | ("\"" (~["\""])* "\"")>
	| <#WHITESPACE: (" " | "\t" | "\n" | "\r")>
	| <#NEWLINE: ("\r\n" | "\r" | "\n")>
	| <#QUOTE: ("'" | "\"")>
}

/*
<*> TOKEN:
{
	<RAZOR_AT: <AT>>                 : LexRazor
}
*/

<DEFAULT> TOKEN :
{
	<EOL: (" " | "\t")* <NEWLINE>>
	| <TAG_START: "<">              : LexStartTag
	| <ENDTAG_START: "</">          : LexStartTag
	| <RAZOR_AT: <AT>>                 : LexRazor
	| <COMMENT_START: "<!--">       : LexComment
	| <DECL_START: "<!">            : LexDecl
//	| <RAZOR_COMMENT_START: "@*">   : LexRazorComment
	| <PCDATA: (~["<", "\r", "\n", "@"])+>
}

<LexStartTag> TOKEN :
{
	<TAG_SCRIPT: "SCRIPT">          : LexInTag
	| <TAG_STYLE: "STYLE">          : LexInTag
	| <TAG_NAME: <IDENTIFIER>>      : LexInTag
	| <LST_ERROR: ~[]>              : DEFAULT
}

<LexRazor> TOKEN : {
	<RAZOR_COMMENT_START: "*">       : LexRazorComment
	| <RAZOR_ESCAPE_AT: <AT>>         : DEFAULT
	| <LRZR_ERROR: ~[]>              : DEFAULT
}

<LexInTag> SPECIAL_TOKEN : {
	<(<WHITESPACE>)+>
}

<LexInTag> TOKEN : {
	<ATTR_NAME: <IDENTIFIER>>
	| <TAG_END: ">">                : DEFAULT
	| <TAG_SLASHEND: "/>">          : DEFAULT
	| <ATTR_EQ: "=">                : LexAttrVal
	| <IMPLICIT_TAG_END: "<">
	{
		final Token t = new Token();
		t.image = "<";
		t.kind = TAG_START;
		t.next = matchedToken.next;
		t.beginLine = matchedToken.beginLine;
		t.beginColumn = matchedToken.beginColumn;
		t.endLine = matchedToken.endLine;
		t.endColumn = matchedToken.endColumn;
		matchedToken.next = t;
		matchedToken.kind = TAG_END;
		matchedToken.image = ">";
	}                               : LexStartTag
	| <LIT_ERROR: ~[]>
}

<LexAttrVal> SPECIAL_TOKEN : {
	< <WHITESPACE> >
}

<LexAttrVal> TOKEN : {
	<ATTR_VAL: <QUOTED_STRING>
		| (~[">", "\"", "'", " ", "\t", "\n", "\r"])+> : LexInTag
		| <LAV_ERROR: ~[]>
}

<LexComment> TOKEN : {
	<COMMENT_END: ("--" (" ")* ">" | "->")>     : DEFAULT
	| <DASH: "-">
	| <COMMENT_EOL: <NEWLINE>>
	| <COMMENT_WORD: (
		(~["\n", "\r", "'", "\"", "-"])+
		| <QUOTED_STRING_NB>
		| <QUOTE>
		)>
}

<LexRazorComment> TOKEN : {
	<RAZOR_COMMENT_END: "*@">               : DEFAULT
	| <RAZOR_COMMENT_EOL: <NEWLINE>>
	| <RAZOR_COMMENT_WORD: (
		(~["\n", "\r", "'", "\"", "*"])+
		| <QUOTED_STRING_NB>
		| <QUOTE>
		)>
}

<LexDecl> TOKEN: {
	<DECL_ANY: (<QUOTED_STRING_NB> | <QUOTE> | ~[">"])+>
	| <DECL_END: ">">: DEFAULT
}

<LexScript> TOKEN : {
	<SCRIPT_END: "</SCRIPT>">                     : DEFAULT
}

<LexStyle> TOKEN : {
	<STYLE_END: "</STYLE>">                       : DEFAULT
}

<LexScript, LexStyle, LexRazor> TOKEN : {
	<BLOCK_EOL: <NEWLINE>>
	| <BLOCK_LBR:"<">
	| <BLOCK_WORD: (
		<QUOTED_STRING_NB>
        | <QUOTE>
        | (~["\n", "\r", "'", "\"", "<"])+)
        >
}

/* COMMENTS */
//MORE :
//{
//	"@*": IN_SERVER_SIDE_COMMENT
//}
//
//<IN_SERVER_SIDE_COMMENT>
//SPECIAL_TOKEN :
//{
//	<SERVER_SIDE_COMMENT: "*@" > : DEFAULT
//}

// LEXICAL SPECIFICATIONS BEGIN HERE

/*TOKEN :
{
	<IF: "if">
	| <DO: "do">
	| <TRY: "try">
	| <FOR: "for">
	| <WHILE: "while">
	| <SWITCH: "switch">
}*/

/* SEPARATORS */
/*TOKEN :
{
	<LPAREN: "(">
	| <RPAREN: ")">
	| <LBRACE: "{">
	| <RBRACE: "}">
	| <LBRACKET: "[">
	| <RBRACKET: "]">
}*/

/* OPERATORS */
/*TOKEN :
{
	<AT: "@">
}
*/

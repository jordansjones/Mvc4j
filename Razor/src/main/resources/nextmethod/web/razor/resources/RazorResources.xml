<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties version="1.0">
	<entry key="activeParser.must.be.code.or.markup.parser">The active parser must the same as either the markup or code parser.</entry>
	<entry key="block.type.not.specified">Block cannot be built because a Type has not been specified in the BlockBuilder</entry>

	<!-- 
		This is a literal used when composing parserError.* messages. Most blocks are named by the keyword that starts them, for example "if".  However, for those without keywords, a (localizable) name must be used.  This literal is ALWAYS used mid-sentence, thus should not be capitalized.
	 -->
	<entry key="blockName.code">code</entry>

	<!-- 
		This is a literal used when composing parserError.* messages. Most blocks are named by the keyword that starts them, for example "if".  However, for those without keywords, a (localizable) name must be used.  This literal is ALWAYS used mid-sentence, thus should not be capitalized.
	 -->
	<entry key="blockName.explicitExpression">explicit expression</entry>
	<entry key="cancelBacktrack.must.be.called.within.lookahead">The "CancelBacktrack" method can be called only while in a look-ahead process started with the "BeginLookahead" method.</entry>

	<!-- 
		This error should not be seen by users, it should only appear to internal developers, but I'm putting it in resources just in case
	 -->
	<entry key="createCodeWriter.noCodeWriter">Cannot call CreateCodeWriter, a CodeWriter was not provided to the Create method</entry>
	<entry key="endBlock.called.without.matching.startBlock">"EndBlock" was called without a matching call to "StartBlock".</entry>
	<entry key="errorComponent.character">"{0}" character</entry>
	<entry key="errorComponent.endOfFile">end of file</entry>
	<entry key="errorComponent.newline">line break</entry>
	<entry key="errorComponent.whitespace">space or line break</entry>
	<entry key="htmlSymbol.newLine">&lt;&lt;newline sequence&gt;&gt;</entry>
	<entry key="htmlSymbol.razorComment">&lt;&lt;razor comment&gt;&gt;</entry>
	<entry key="htmlSymbol.text">&lt;&lt;text&gt;&gt;</entry>
	<entry key="htmlSymbol.whiteSpace">&lt;&lt;white space&gt;&gt;</entry>
	<entry key="javaSymbol.characterLiteral">&lt;&lt;character literal&gt;&gt;</entry>
	<entry key="javaSymbol.comment">&lt;&lt;comment&gt;&gt;</entry>
	<entry key="javaSymbol.identifier">&lt;&lt;identifier&gt;&gt;</entry>
	<entry key="javaSymbol.integerLiteral">&lt;&lt;integer literal&gt;&gt;</entry>
	<entry key="javaSymbol.keyword">&lt;&lt;keyword&gt;&gt;</entry>
	<entry key="javaSymbol.newline">&lt;&lt;newline sequence&gt;&gt;</entry>
	<entry key="javaSymbol.realLiteral">&lt;&lt;real literal&gt;&gt;</entry>
	<entry key="javaSymbol.stringLiteral">&lt;&lt;string literal&gt;&gt;</entry>
	<entry key="javaSymbol.whitespace">&lt;&lt;white space&gt;&gt;</entry>
	<entry key="language.does.not.support.razorComment">Cannot use built-in RazorComment handler, language characteristics does not define the CommentStart, CommentStar and CommentBody known symbol types or parser does not override TokenizerBackedParser.OutputSpanBeforeRazorComment</entry>
	<entry key="parseError.atInCode.must.be.followed.by.colon.paren.or.identifier.start">The "@" character must be followed by a ":", "(", or a Java identifier.  If you intended to switch to markup, use an HTML start tag, for example:

@if(isLoggedIn) {
    &lt;p&gt;Hello, @user!&lt;/p&gt;
}</entry>
	<entry key="parseError.blockComment.not.terminated">End of file was reached before the end of the block comment.  All comments started with "/*" sequence must be terminated with a matching "*/" sequence.</entry>
	<entry key="parseError.blockNotTerminated">The "{0}" block was not terminated.  All "{0}" statements must be terminated with a matching "{1}".</entry>
	<entry key="parseError.expected.closeBracket.before.eof">An opening "{0}" is missing the corresponding closing "{1}".</entry>
	<entry key="parseError.expected.endOfBlock.before.eof">The {0} block is missing a closing "{1}" character.  Make sure you have a matching "{1}" character for all the "{2}" characters within this block, and that none of the "{1}" characters are being interpreted as markup.</entry>
	<entry key="parseError.expected.x">Expected "{0}".</entry>
	<entry key="parseError.helpers.cannot.be.nested">Helper blocks cannot be nested within each other.</entry>
	<entry key="parseError.inheritsKeyword.must.be.followed.by.typeName">The 'inherits' keyword must be followed by a type name on the same line.</entry>
	<entry key="parseError.inlineMarkup.blocks.cannot.be.nested">Inline markup blocks (@&lt;p&gt;Content&lt;/p&gt;) cannot be nested.  Only one level of inline markup is allowed.</entry>
	<entry key="parseError.markupBlock.must.start.with.tag">Markup in a code block must start with a tag and all start tags must be matched with end tags.  Do not use unclosed tags like "&lt;br&gt;".  Instead use self-closing tags like "&lt;br/&gt;".</entry>
	<entry key="parseError.missingCharAfterHelperName">Expected a "{0}" after the helper name.</entry>
	<entry key="parseError.missingCharAfterHelperParameters">Expected a "{0}" after the helper parameters.</entry>
	<entry key="parseError.missingEndTag">The "{0}" element was not closed.  All elements must be either self-closing or have a matching end tag.</entry>
	<entry key="parseError.missingOpenBraceAfterSection">Sections cannot be empty.  The "@section" keyword must be followed by a block of markup surrounded by "'{''}'".  For example:

@section Sidebar {
   &lt;!-- Markup and text goes here --&gt;
}</entry>
	<entry key="parseError.namespaceImportAndTypeAlias.cannot.exist.within.codeBlock">Namespace imports and type aliases cannot be placed within code blocks.  They must immediately follow an "@" character in markup.  It is recommended that you put them at the top of the page, as in the following example:

@using System.Drawing;
@{
    // OK here to use types from System.Drawing in the page.
}</entry>
	<entry key="parseError.namespaceOrTypeAliasExpected">The "Imports" keyword must be followed by a namespace or a type alias on the same line.</entry>
	<entry key="parseError.outerTagMissingName">Outer tag is missing a name. The first character of a markup block must be an HTML tag with a valid name.</entry>
	<entry key="parseError.razorComment.not.terminated">End of file was reached before the end of the block comment.  All comments that start with the "@*" sequence must be terminated with a matching "*@" sequence.</entry>
	<entry key="parseError.reservedWord">"{0}" is a reserved word and cannot be used in implicit expressions.  An explicit expression ("@()") must be used.</entry>
	<entry key="parseError.sections.cannot.be.nested">Section blocks ("{0}") cannot be nested.  Only one level of section blocks are allowed.</entry>

	<!-- 
		{0} is only ever a single character
	 -->
	<entry key="parseError.singleLine.controlFlowStatements.not.allowed">Expected a "{0}" but found a "{1}".  Block statements must be enclosed in "'{'" and "'}'".  You cannot use single-statement control-flow statements in RZHTML pages. For example, the following is not allowed:

@if(isLoggedIn)
    &lt;p&gt;Hello, @user&lt;/p&gt;

Instead, wrap the contents of the block in "'{''}'":

@if(isLoggedIn) '{'
    &lt;p&gt;Hello, @user&lt;/p&gt;
'}'</entry>
	<entry key="parseError.textTagCannotContainAttributes">"&lt;text&gt;" and "&lt;/text&gt;" tags cannot contain attributes.</entry>
	<entry key="parseError.unexpected">Unexpected "{0}"</entry>
	<entry key="parseError.unexpected.character.at.helper.name.start">Unexpected {0} after helper keyword.  All helpers must have a name which starts with an "_" or alphabetic character. The remaining characters must be either "_" or alphanumeric.</entry>
	<entry key="parseError.unexpected.character.at.section.name.start">Unexpected {0} after section keyword.  Section names must start with an "_" or alphabetic character, and the remaining characters must be either "_" or alphanumeric.</entry>

	<!-- 
		"{{" is an escape sequence for String.Format, when outputted to the user it will be displayed as "{"
	 -->
	<entry key="parseError.unexpected.character.at.start.of.codeBlock">"{0}" is not valid at the start of a code block.  Only identifiers, keywords, comments, "(" and "'{'" are valid.</entry>
	<entry key="parseError.unexpected.endOfFile.at.start.of.codeBlock">End-of-file was found after the "@" character.  "@" must be followed by a valid code block.  If you want to output an "@", escape it using the sequence: "@@"</entry>
	<entry key="parseError.unexpected.keyword.after.at">Unexpected "{0}" keyword after "@" character.  Once inside code, you do not need to prefix constructs like "{0}" with "@".</entry>
	<entry key="parseError.unexpected.nested.codeBlock">Unexpected "'{'" after "@" character. Once inside the body of a code block (@if '{''}', @'{''}', etc.) you do not need to use "@'{'" to switch to code.</entry>
	<entry key="parseError.unexpected.whiteSpace.at.start.of.codeBlock">A space or line break was encountered after the "@" character.  Only valid identifiers, keywords, comments, "(" and "'{'" are valid at the start of a code block and they must occur immediately following "@" with no space in between.</entry>
	<entry key="parseError.unexpectedEndTag">Encountered end tag "{0}" with no matching start tag.  Are your start/end tags properly balanced?</entry>
	<entry key="parseError.unfinishedTag">End of file or an unexpected character was reached before the "{0}" tag could be parsed.  Elements inside markup blocks must be complete. They must either be self-closing ("&lt;br /&gt;") or have matching end tags ("&lt;p&gt;Hello&lt;/p&gt;").  If you intended to display a "&lt;" character, use the "&amp;lt;" HTML entity.</entry>
	<entry key="parseError.unknownOption">Unknown option: "{0}".</entry>
	<entry key="parseError.unterminated.string.literal">Unterminated string literal.  Strings that start with a quotation mark (") must be terminated before the end of the line.  However, strings that start with @ and a quotation mark (@") can span multiple lines.</entry>
	<entry key="parseError.unterminatedHelperParameterList">Helper parameter list is missing a closing ")".</entry>
	<entry key="parser.context.not.set">Parser was started with a null Context property.  The Context property must be set BEFORE calling any methods on the parser.</entry>
	<entry key="parserContext.cannotCompleteTree.noRootBlock">Cannot complete the tree, StartBlock must be called at least once.</entry>
	<entry key="parserContext.cannotCompleteTree.outstandingBlocks">Cannot complete the tree, there are still open blocks.</entry>
	<entry key="parserContext.noCurrentBlock">Cannot finish span, there is no current block. Call StartBlock at least once before finishing a span</entry>
	<entry key="parserContext.parseComplete">Cannot complete action, the parser has finished. Only CompleteParse can be called to extract the final parser results after the parser has finished</entry>
	<entry key="parserError.sessionDirectiveMissingValue">Missing value for session state directive.</entry>
	<entry key="parserIsNotAMarkupParser">The parser provided to the ParserContext was not a Markup Parser.</entry>

	<!-- 
		In RZHTML, the @section keyword is case-sensitive and lowercase (as with all Java keywords)
	 -->
	<entry key="sectionExample">@section Header { ... }</entry>
	<entry key="structure.member.cannotBeNull">The {0} property of the {1} structure cannot be null.</entry>
	<entry key="symbol.unknown">&lt;&lt;unknown&gt;&gt;</entry>
	<entry key="tokenizer.cannotResumeSymbolUnlessIsPrevious">Cannot resume this symbol. Only the symbol immediately preceding the current one can be resumed.</entry>
	<entry key="tokenizerView.cannotPutBack">In order to put a symbol back, it must have been the symbol which ended at the current position. The specified symbol ends at {0,number}, but the current position is {1,number}</entry>
	<entry key="trace.backgroundThreadShutdown">[BG][{0}] Shutdown</entry>
	<entry key="trace.backgroundThreadStart">[BG][{0}] Startup</entry>
	<entry key="trace.changesArrived">[BG][{0}] {1} changes arrived</entry>
	<entry key="trace.changesDiscarded">[BG][{0}] Discarded {1} changes</entry>
	<entry key="trace.collectedDiscardedChanges">[BG][{0}] Collecting {1} discarded changes</entry>
	<entry key="trace.disabled">Disabled</entry>
	<entry key="trace.editorProcessedChange">[P][{0}] {3} Change in {2} milliseconds: {1}</entry>
	<entry key="trace.editorReceivedChange">[P][{0}] Received Change: {1}</entry>
	<entry key="trace.enabled">Enabled</entry>
	<entry key="trace.format">[Razor] {0}</entry>
	<entry key="trace.noChangesArrived">[BG][{0}] no changes arrived?</entry>
	<entry key="trace.parseComplete">[BG][{0}] Parse Complete in {1} milliseconds</entry>
	<entry key="trace.queuingParse">[M][{0}] Queuing Parse for: {1}</entry>
	<entry key="trace.startup">[Razor] Editor Tracing {0}</entry>
	<entry key="trace.treesCompared">[BG][{0}] Trees Compared in {1} milliseconds. Different = {2}</entry>
</properties>